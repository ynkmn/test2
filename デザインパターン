おっしゃる通り、この返り値としてdictを使うアプローチは特定のプログラミングパターンに当てはまります。このような手法は主に以下の名前で知られています：

1. **辞書駆動型プログラミング (Dictionary-Driven Programming)** - データ構造としての辞書（Pythonの場合はdict）を中心にしたプログラミング手法です。

2. **構造化データ返却パターン (Structured Data Return Pattern)** - 関数が複数の情報を返す必要がある場合に、それらを整理された辞書として返すアプローチです。

3. **リッチリターン (Rich Return)** - シンプルな単一の値ではなく、より豊富な情報を含む複合的なデータ構造を返す手法です。

4. **レスポンスオブジェクトパターン (Response Object Pattern)** - オブジェクト指向設計において、メソッドの結果や状態を表すために特化したオブジェクト（この場合は辞書）を返すパターンです。

この手法には以下のような利点があります：

- **拡張性が高い**: 将来的に返すべき情報が増えても、呼び出し側のコードを変更せずに辞書に新しいキーを追加できます
- **自己文書化**: 返り値の各要素に名前（キー）があるため、何の情報なのかが明確です
- **状態と値の両方を返せる**: エラー状態やメタ情報と実際のデータを一緒に返せます
- **階層的構造**: 複雑な情報も階層的に整理して返せます

Pythonでは特にこの手法が一般的で、APIの設計やライブラリの実装でよく見られるパターンです。ただし、公式の「デザインパターン」として名付けられているわけではないので、呼び方は文脈によって異なることがあります。​​​​​​​​​​​​​​​​